// Generated by CoffeeScript 1.9.1
(function() {
  "use strict";
  (function($) {

    /*
      FUNCTION BLOCK
     */

    /*
        Retrieve an image from Trakt
     */
    var displayEpisodes, getEpImage, getShowImage, handleSeasonInformation, root, setSeasonInformation, setShowInformation;
    getShowImage = function(label, callback) {
      return traktRequest('/shows/' + label + '?extended=images').success(function(data) {
        return callback(null, data.images.thumb.full);
      }).fail(function(XHR) {
        return callback(XHR);
      });
    };

    /*
      Set the Show information (HTML)
     */
    setShowInformation = function(item, callback) {
      $('#startYear').text(item.start_year);
      $('#showTitle').text(item.title);
      $('#endYear').text(item.end_year);
      $('#channel').text(item.channel);
      $('#summary').text(item.summary);
      return getShowImage(item.showLabel, function(error, imgUrl) {
        if (error) {
          console.log(error);
          $('#showImage img').attr('src', '/static/image/no-image.png');
          return callback();
        }
        $('#showImage img').attr('src', imgUrl);
        return callback();
      });
    };

    /*
      Set the HTML with the sessions information
     */
    handleSeasonInformation = function(seasons) {
      var seasonList;
      seasonList = $("#showSeasons ul");
      return seasons.forEach(function(season) {
        var li, link;
        link = $('<a>', {
          "class": 'season',
          href: '#',
          'data-episodes': season._links.episode.href
        }).text('Season ' + season.number);
        li = $('<li>').html(link);
        return seasonList.append(li);
      });
    };

    /*
      Do the request to get season information
     */
    setSeasonInformation = function(item, callback) {
      var seasonList;
      seasonList = $("#showSeasons ul");
      seasonList.html('');
      return $.ajax({
        url: item._links.seasons.href,
        type: 'GET',
        dataType: 'json'
      }).success(function(data) {
        return handleSeasonInformation(data._embedded.season);
      }).complete(function() {
        return callback();
      });
    };

    /*
      Get Image URL from the trakt data
     */
    getEpImage = function(traktInfo, episodeNumber) {
      var imgUrl;
      imgUrl = null;
      traktInfo.every(function(episode) {
        if (episode.number === episodeNumber) {
          imgUrl = episode.images.screenshot.thumb;
          return false;
        }
        return true;
      });
      return imgUrl;
    };

    /*
      Create the DOM element for an episode using the template given in
      the HTML code (#episodeTemplate)
     */
    displayEpisodes = function(episodes, traktInfo) {
      var $episodes, $template, generatedEp;
      $template = $("#episodeTemplate");
      $episodes = $("#showEpisodes").html('');
      generatedEp = [];
      episodes.forEach(function(episode) {
        var $newEp, imageUrl;
        $newEp = $template.clone();
        if (traktInfo) {
          imageUrl = getEpImage(traktInfo, episode.number);
          if (imageUrl) {
            $newEp.find("div.episodeImage img").attr('src', imageUrl);
          }
        }
        $newEp.attr('id', 'ep-' + episode.number);
        $newEp.find("h2").text(episode.title);
        $newEp.find("div.summary").text(episode.summary);
        $newEp.find("span.epBcast").text(episode.bcast_date);
        $newEp.find("span.epNumber").text(episode.number);
        $newEp.removeClass('invisible');
        return generatedEp.push($newEp);
      });
      return $episodes.append(generatedEp);
    };

    /*
      LINK BLOCK
     */
    $('#showSeasons').on('click', 'a.season', function(e) {
      var $link, traktUrl, url;
      e.preventDefault();
      toggleLoadingScreen();
      $link = $(e.target);
      url = $link.attr('data-episodes');
      traktUrl = url.replace('/tvflix', '') + '?extended=images';
      return $.ajax({
        url: url,
        type: 'GET',
        dataType: 'json'
      }).success(function(data) {
        return traktRequest(traktUrl).success(function(traktData) {
          displayEpisodes(data._embedded.episode, traktData);
          return setTimeout(toggleLoadingScreen, 500);
        }).fail(function() {
          displayEpisodes(data._embedded.episode);
          return setTimeout(toggleLoadingScreen, 500);
        });
      }).fail(toggleLoadingScreen);
    });
    root = typeof window !== "undefined" && window !== null ? window : this;
    return $.extend(root, {
      setShowInformation: setShowInformation,
      handleSeasonInformation: handleSeasonInformation,
      setSeasonInformation: setSeasonInformation
    });
  })(jQuery);

}).call(this);

//# sourceMappingURL=show.js.map
