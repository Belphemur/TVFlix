// Generated by CoffeeScript 1.9.1
(function() {
  "use strict";
  (function($) {
    var $addButton, $commentManager, $comments, $template, addComment, createComment, deleteComment, displayCommentEditor, editComment, handleAddedComment, handleDeletedComment, handleFailure, handleUserLogin, handleUserLogout, root, user;
    $comments = $("#showComments");
    $template = $("#commentTemplate");
    $addButton = $('#showCommentsContainer button.add');
    user = User.getCurrentUser();
    $commentManager = $('<div class="commentManager"><button class="btn btn-default edit"><span class="glyphicon glyphicon-edit"></span></button> <button class="btn btn-danger delete"><span class="glyphicon glyphicon-remove"></span></button></div>');

    /*
      Check if the comment need to have its managing button
     */
    handleAddedComment = function(event, jQueryObject) {
      if (jQueryObject.attr('data-username') !== user.name) {
        return;
      }
      $addButton.prop('disabled', true);
      return jQueryObject.append($commentManager);
    };

    /*
      When deleting a comment, if it's the one of the current user reenable the addbutton
     */
    handleDeletedComment = function(event, $comment) {
      if ($comment.attr('data-username') !== user.name) {
        return;
      }
      return $addButton.prop('disabled', false);
    };

    /*
      Remove all managing button if the user logout
     */
    handleUserLogout = function(event) {
      $comments.find('.comment .commentManager').remove();
      return $addButton.prop('disabled', true);
    };

    /*
      Check if the user have a comment for the current show and add the managing button
     */
    handleUserLogin = function(event) {
      $addButton.prop('disabled', false);
      return $comments.find('.comment').each(function() {
        return handleAddedComment(null, $(this));
      });
    };

    /*
      Transform a Comment object into a Comment DOM and add it to the comment container
     */
    createComment = function(comment) {
      var $newComment;
      $newComment = $template.clone();
      $newComment.attr('id', 'com-' + comment.username);
      $newComment.attr('data-username', comment.username);
      $newComment.find("h3").text(comment.username);
      $newComment.find("div.avatar img").attr('src', '//robohash.org/' + comment.username + '?set=set3&size=60x60');
      $newComment.find("p").text(comment.comment);
      $newComment.removeClass('invisible');
      $newComment.attr('data-url', comment._links.self.href);
      $comments.append($newComment);
      $comments.trigger('comment.added', [$newComment]);
      return $newComment;
    };

    /*
      Display error message in case of failure.
     */
    handleFailure = function(jQXHR, command) {
      if (jQXHR.status === 401) {
        $.notify({
          message: "You can't " + command + " this comment. Invalid APIKey. Please log again."
        }, {
          type: 'danger'
        });
        return user.clearInfo();
      } else {
        $.notify({
          message: "A problem happen, can't " + command + " the comment"
        }, {
          type: 'danger'
        });
        return console.error(jQXHR);
      }
    };

    /*
      Delete a comment. Send the request and remove it from the list
     */
    deleteComment = function(url, $comment) {
      return user.sendUserRequest(url, 'DELETE').success(function() {
        $.notify({
          message: 'Comment successfully deleted'
        }, {
          type: 'info'
        });
        $comment.fadeOut();
        return $comments.trigger('comment.deleted', [$comment]);
      }).fail(function(jQHXR) {
        return handleFailure(jQHXR, 'delete');
      });
    };

    /*
      Edit the comment. Send the request and modify it on success
     */
    editComment = function(newComment, url, $comment) {
      return user.sendUserRequest(url, 'PUT', {
        comment: newComment
      }).success(function() {
        $.notify({
          message: 'Comment successfully edited'
        }, {
          type: 'info'
        });
        return $comment.find('p').text(newComment);
      }).fail(function(jQXHR) {
        return handleFailure(jQXHR, 'edit');
      });
    };

    /*
      Add the comment. Send the request and add it on success
     */
    addComment = function(newComment, url) {
      return user.sendUserRequest(url, 'POST', {
        comment: newComment
      }).success(function(data) {
        $.notify({
          message: 'Comment successfully added'
        }, {
          type: 'info'
        });
        return createComment(data);
      }).fail(function(jQXHR) {
        return handleFailure(jQXHR, 'add');
      });
    };

    /*
      Open the modal with the comment editor
     */
    displayCommentEditor = function(title, commentText, callback) {
      var buttonText;
      buttonText = title.split(' ')[0];
      return bootbox.dialog({
        title: title,
        message: '<div class="row"><div class="col-lg-12"><textarea id="commentTextarea" style="width: 100%;">' + commentText + '</textarea></div></div>',
        buttons: {
          success: {
            label: '<span class="glyphicon glyphicon-edit">' + buttonText + '</span>',
            className: 'btn-success',
            callback: function() {
              return callback($("#commentTextarea").val());
            }
          }
        }
      });
    };

    /*
      EVENTS
     */
    $comments.on('comment.added', handleAddedComment);
    $comments.on('comment.deleted', handleDeletedComment);
    $comments.on('comment.no-comments', function() {
      return $addButton.prop('disabled', false);
    });
    $(user).on('user.logout', handleUserLogout);
    $(user).on('user.login', handleUserLogin);
    $("#show").on('show.loaded', function() {
      return $("#showComments").html('');
    });

    /*
      BUTTONS
     */
    $comments.on('click', 'button.delete', function(event) {
      var $comment, url;
      event.preventDefault();
      $comment = $(this).parent().parent();
      url = $comment.attr('data-url');
      return bootbox.confirm("Delete the comment ?", function(result) {
        if (result) {
          return deleteComment(url, $comment);
        }
      });
    });
    $comments.on('click', 'button.edit', function(event) {
      var $comment, commentText, url;
      event.preventDefault();
      $comment = $(this).parent().parent();
      url = $comment.attr('data-url');
      commentText = $comment.find('p').text();
      return displayCommentEditor('Edit Comment', commentText, function(newComment) {
        return editComment(newComment, url, $comment);
      });
    });
    $addButton.on('click', function(event) {
      var url;
      event.preventDefault();
      url = $comments.attr('data-url');
      return displayCommentEditor('Add a Comment', '', function(newComment) {
        return addComment(newComment, url);
      });
    });
    $addButton.parent().tooltip();
    if (user.isValid()) {
      handleUserLogin();
    }
    root = typeof window !== "undefined" && window !== null ? window : this;
    return root.createComment = createComment;
  })(jQuery);

}).call(this);

//# sourceMappingURL=comment.js.map
