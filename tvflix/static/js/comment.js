// Generated by CoffeeScript 1.9.1
(function() {
  "use strict";
  (function($) {
    var $commentManager, $comments, $template, createComment, deleteComment, editComment, handleAddedComment, handleUserLogin, handleUserLogout, root, user;
    $comments = $("#showComments");
    $template = $("#commentTemplate");
    user = User.getCurrentUser();
    $commentManager = $('<div class="commentManager"><button class="btn btn-default edit"><span class="glyphicon glyphicon-edit"></span></button> <button class="btn btn-danger delete"><span class="glyphicon glyphicon-remove"></span></button></div>');

    /*
      Check if the comment need to have its managing button
     */
    handleAddedComment = function(event, jQueryObject) {
      if (jQueryObject.attr('data-username') !== user.name) {
        return;
      }
      return jQueryObject.append($commentManager);
    };

    /*
      Remove all managing button if the user logout
     */
    handleUserLogout = function(event) {
      return $comments.find('.comment .commentManager').remove();
    };

    /*
      Check if the user have a comment for the current show and add the managing button
     */
    handleUserLogin = function(event) {
      return $comments.find('.comment').each(function() {
        return handleAddedComment(null, $(this));
      });
    };

    /*
      Transform a Comment object into a Comment DOM
     */
    createComment = function(comment) {
      var $newComment;
      $newComment = $template.clone();
      $newComment.attr('id', 'com-' + comment.username);
      $newComment.attr('data-username', comment.username);
      $newComment.find("h3").text(comment.username);
      $newComment.find("div.avatar img").attr('src', '//robohash.org/' + comment.username + '?set=set3&size=60x60');
      $newComment.find("p").text(comment.comment);
      $newComment.removeClass('invisible');
      $newComment.attr('data-url', comment._links.self.href);
      return $newComment;
    };

    /*
      EVENTS
     */
    $comments.on('comment.added', handleAddedComment);
    $(user).on('user.logout', handleUserLogout);
    $(user).on('user.login', handleUserLogin);
    deleteComment = function(url, $comment) {
      return user.sendUserRequest(url, 'DELETE').success(function() {
        $.notify({
          message: 'Comment successfully deleted'
        }, {
          type: 'info'
        });
        return $comment.fadeOut();
      }).fail(function(jQXHR) {
        if (jQXHR.status === 401) {
          $.notify({
            message: "You can't delete this comment. Invalid APIKey. Please log again."
          }, {
            type: 'danger'
          });
          return user.clearInfo();
        } else {
          $.notify({
            message: "A problem happen, can't delete the comment"
          }, {
            type: 'danger'
          });
          return console.error(jQXHR);
        }
      });
    };
    $comments.on('click', 'button.delete', function(event) {
      var $comment, url;
      event.preventDefault();
      $comment = $(this).parent().parent();
      url = $comment.attr('data-url');
      return bootbox.confirm("Delete the comment ?", function(result) {
        if (result) {
          return deleteComment(url, $comment);
        }
      });
    });
    editComment = function(url, $comment) {
      var newComment;
      newComment = $("#editedComment").val();
      return user.sendUserRequest(url, 'PUT', {
        comment: newComment
      }).success(function() {
        $.notify({
          message: 'Comment successfully edited'
        }, {
          type: 'info'
        });
        return $comment.find('p').text(newComment);
      }).fail(function(jQXHR) {
        if (jQXHR.status === 401) {
          $.notify({
            message: "You can't edit this comment. Invalid APIKey. Please log again."
          }, {
            type: 'danger'
          });
          return user.clearInfo();
        } else {
          $.notify({
            message: "A problem happen, can't delete the comment"
          }, {
            type: 'danger'
          });
          return console.error(jQXHR);
        }
      });
    };
    $comments.on('click', 'button.edit', function(event) {
      var $comment, commentText, url;
      event.preventDefault();
      $comment = $(this).parent().parent();
      url = $comment.attr('data-url');
      commentText = $comment.find('p').text();
      return bootbox.dialog({
        title: 'Edit Comment',
        message: '<div class="row"><div class="col-lg-12"><textarea id="editedComment" style="width: 100%;">' + commentText + '</textarea></div></div>',
        buttons: {
          success: {
            label: '<span class="glyphicon glyphicon-edit">Edit</span>',
            className: 'btn-success',
            callback: function() {
              return editComment(url, $comment);
            }
          }
        }
      });
    });
    root = typeof window !== "undefined" && window !== null ? window : this;
    return root.createComment = createComment;
  })(jQuery);

}).call(this);

//# sourceMappingURL=comment.js.map
